{"code":"/**\n * Focus an element without having the page scroll jump to that element.\n */\nexport const focusWithoutScrolling = (elem) => {\n    const x = window.pageXOffset;\n    const y = window.pageYOffset;\n    elem.focus();\n    window.scrollTo(x, y);\n};\n/**\n * Get the keyCode of the last key pressed.\n */\nexport const getLastKeyCode = (() => {\n    let lastKeyCode = null;\n    document.addEventListener('keydown', ({ keyCode }) => {\n        lastKeyCode = keyCode;\n    });\n    return () => lastKeyCode;\n})();\n/**\n * Get the last input device used.\n */\nexport const getLastInputDevice = (() => {\n    let lastDevice = 'mouse';\n    document.addEventListener('mousedown', () => {\n        lastDevice = 'mouse';\n    });\n    document.addEventListener('keydown', () => {\n        lastDevice = 'keyboard';\n    });\n    return () => lastDevice;\n})();\n/**\n * Check if a touch event has occurred in the last `timeout`\n * milliseconds.\n */\nexport const wasRecentlyTouched = (() => {\n    let lastTouched = null;\n    document.addEventListener('touchstart', () => {\n        lastTouched = Date.now();\n    });\n    return (timeout = 100) => {\n        if (!lastTouched) {\n            return false;\n        }\n        return (Date.now() - timeout) < lastTouched;\n    };\n})();\n/**\n * Test a path to see if it has a file extension.\n *\n * @example\n * hasExtension('/');                 // false\n * hasExtension('/travel');           // false\n * hasExtension('/travel/cats.mp4');  // true\n * hasExtension('/travel/cats.json'); // true\n */\nexport const hasExtension = (pathname) => /\\.[^/.]+$/.test(pathname);\n/**\n * A wrapper around `document.querySelectorAll` that returns a plain array\n * instead of a `NodeList` instance.\n */\nexport const $ = (selector) => Array.prototype.slice.call(document.querySelectorAll(selector));\n//# sourceMappingURL=utils.js.map","map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../publicSrc/scripts/includes/utils.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,IAAiB,EAAE,EAAE;IAC1D,MAAM,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;IAC7B,MAAM,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;IAC7B,IAAI,CAAC,KAAK,EAAE,CAAC;IACb,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,GAAG,EAAE;IACnC,IAAI,WAAW,GAAkB,IAAI,CAAC;IACtC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;QACpD,WAAW,GAAG,OAAO,CAAC;IACvB,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,EAAE,CAAC,WAAW,CAAC;AAC1B,CAAC,CAAC,EAAE,CAAC;AAEL;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAG,EAAE;IACvC,IAAI,UAAU,GAAyB,OAAO,CAAC;IAC/C,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE;QAC3C,UAAU,GAAG,OAAO,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE;QACzC,UAAU,GAAG,UAAU,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC;AACzB,CAAC,CAAC,EAAE,CAAC;AAEL;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAG,EAAE;IACvC,IAAI,WAAW,GAAkB,IAAI,CAAC;IACtC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE;QAC5C,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,EAAE;QACxB,IAAI,CAAC,WAAW,EAAE;YACjB,OAAO,KAAK,CAAC;SACb;QACD,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,WAAW,CAAC;IAC7C,CAAC,CAAC;AACH,CAAC,CAAC,EAAE,CAAC;AAEL;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,QAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAE7E;;;GAGG;AACH,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,QAAgB,EAAE,EAAE,CACrC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC\"}","dts":{"name":"/Users/daniellevett/Projects/dlevs.com/publicSrc/scripts/includes/utils.d.ts","writeByteOrderMark":false,"text":"/**\n * Focus an element without having the page scroll jump to that element.\n */\nexport declare const focusWithoutScrolling: (elem: HTMLElement) => void;\n/**\n * Get the keyCode of the last key pressed.\n */\nexport declare const getLastKeyCode: () => number | null;\n/**\n * Get the last input device used.\n */\nexport declare const getLastInputDevice: () => \"mouse\" | \"keyboard\";\n/**\n * Check if a touch event has occurred in the last `timeout`\n * milliseconds.\n */\nexport declare const wasRecentlyTouched: (timeout?: number) => boolean;\n/**\n * Test a path to see if it has a file extension.\n *\n * @example\n * hasExtension('/');                 // false\n * hasExtension('/travel');           // false\n * hasExtension('/travel/cats.mp4');  // true\n * hasExtension('/travel/cats.json'); // true\n */\nexport declare const hasExtension: (pathname: string) => boolean;\n/**\n * A wrapper around `document.querySelectorAll` that returns a plain array\n * instead of a `NodeList` instance.\n */\nexport declare const $: (selector: string) => any[];\n"}}
